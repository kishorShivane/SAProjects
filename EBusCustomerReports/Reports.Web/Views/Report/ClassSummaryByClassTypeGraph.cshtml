@model Reports.Services.Models.SalesAnalysisFilter
@{
    ViewBag.Title = "ClassSummaryByClassType Graph";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
    var date = DateTime.Now.Date;
}
@section scripts
{
    <script src="~/Scripts/Multiselect/bootstrap-multiselect.js"></script>
    <link href="~/Styles/Multiselect/bootstrap-multiselect.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.theme.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.dialog.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.button.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.core.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.base.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery.ui.all.css" rel="stylesheet" />
    <link href="~/Styles/Jquery/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/JqueryVal/jquery.validate-vsdoc.js"></script>
    <script src="~/Scripts/JqueryVal/jquery.validate.js"></script>
    <script src="~/Scripts/JqueryVal/jquery.validate.min.js"></script>
    <script src="~/Scripts/JqueryVal/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/JqueryVal/jquery.validate.unobtrusive.min.js"></script>
    <style>
        div.ui-datepicker {
            font-size: 15px;
        }

        .input-validation-error {
            border-color: red;
        }

        .field-validation-error {
            color: red;
            font-weight: bold;
        }
    </style>
    <script src="~/Scripts/Charts/Chart.js"></script>
    <script>
        var ajaxData = [];

        var v = 2;
        function updateGraph() {
            var ctx = document.getElementById("canvas").getContext("2d");
            new Chart(ctx).Bar(data, {
                barShowStroke: true,
                responsive: true,
                showTooltips: false,
                barValueSpacing: 10,
                barDatasetSpacing: 2,
                onAnimationComplete: function () {
                    var ctx = this.chart.ctx;
                    ctx.font = this.scale.font;
                    ctx.fillStyle = "#000";
                    ctx.textAlign = "center";
                    ctx.textBaseline = "top";

                    this.datasets.forEach(function (dataset) {
                        v++;
                        dataset.bars.forEach(function (bar) {
                            var barval;
                            if (bar.value == "0") {
                                barval = bar.y - 20;
                            }
                            else if (v % 2 == 0) {
                                barval = bar.y - 10;
                            }
                            else {
                                barval = bar.y - 20;
                            }
                            ctx.fillText("R " + bar.value.format(), bar.x, barval);
                        });
                    })
                }
            });
        }

        function getData() {
            $("#loading").show();
            $.ajax({
                type: "GET",
                url: $("#ajaxUrl").val(),
                data: { classGroupId: $("#ClassGroupsSelected").val() },
                dataType: "Json",
                cache: false,
                async: true,
                success: function (result) {
                    if (result.Data != null && result.Data.length > 0) {
                        ajaxData = result.Data;
                    }
                    createGraphData();
                    updateGraph();
                    $("#loading").hide();
                }
            });
        }

        $(document).ready(function () {
            $(document).ajaxStart(function () {
            });

            $(document).ajaxStop(function () {
                //$("#loading").hide();
            });

            $("#showGraph").click(function () {
                getData();
            });
            getData();

            $("#Print").click(function () {
                var opt = $("#ClassGroupsSelected option:selected").text();
                if (opt.toLowerCase() == "both")
                {
                    opt = "Driver & Seller"
                }
                $("#buttonsSection").hide(); 
                $("#titleP").text("Class Summary By ClassType Graph" + " - " + opt);
                window.print();
                $("#titleP").text("Class Summary By ClassType Graph");
                $("#buttonsSection").show();
            });
        });

        function createGraphData() {

            var thisMonthData = [];
            var lastMonthData = [];
            var las2LastData = [];

            var xLabels = [];

            $.each(ajaxData, function (index, value) {
                xLabels.push(value.ClassTypeName);
                las2LastData.push(value.Last2Revenue);
                lastMonthData.push(value.LastRevenue);
                thisMonthData.push(value.CurrentRevenue);
            });

            data = {
                labels: xLabels,
                datasets: [
                    {
                        label: "My First dataset",
                        fillColor: "red",
                        strokeColor: "red",
                        highlightFill: "red",
                        highlightStroke: "red",
                        data: las2LastData
                    },
                    {
                        label: "My Second dataset",
                        fillColor: "orange",
                        strokeColor: "orange",
                        highlightFill: "orange",
                        highlightStroke: "orange",
                        data: lastMonthData
                    },
                    {
                        label: "My third dataset",
                        fillColor: "blue",
                        strokeColor: "blue",
                        highlightFill: "blue",
                        highlightStroke: "blue",
                        data: thisMonthData
                    }
                ]
            };
        }

        Number.prototype.format = function (n, x) {
            var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\.' : '$') + ')';
            return this.toFixed(Math.max(0, ~~n)).replace(new RegExp(re, 'g'), '$&,');
        };
    </script>
    <style>
        .lblFont {
            font-weight: bold;
            color: brown;
        }

        .zindex {
            z-index: 99999;
        }

        .multiselect {
            margin-left: 20px !important;
            margin-top:  3px !important;
        }
    </style>
}


<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h2 id="titleP" class="page-header" style="margin: 10px; color: #5e5e5e !important">Class Summary By ClassType Graph</h2>
        </div>
    </div>
    <div class="row" id="buttonsSection">
        @Html.ValidationSummary(true)
        <div class="form-group ">
            <div align="left" class="col-md-3 col-sm-12 ">
                @Html.DropDownListFor(s => s.ClassGroupsSelected, Model.ClassGroups, new { @class = "form-control multiselect" })
            </div>
            <div align="left" class="col-md-2 col-sm-12">
                <button id="showGraph" type="button" style="width: 100%; margin-left: 20px;" class="btn btn-success">
                    Refresh
                </button>
            </div>
            <div align="left" class="col-md-2 col-sm-12">
                <button id="Print" type="submit" style="width: 100%; margin-left: 20px;" class="btn btn-info">
                    Print
                </button>
            </div>
        </div>
    </div>
    <div class="row" style="min-height: 15px;">
    </div>
    <div class="row" id="loading" style="display: block;">
        <img style="padding-left:40%;top:50%;position:relative;height:32px;" src="~/Images/ajax-loader.gif" alt="Loading.." />
    </div>
    <div class="row">
        <div style="margin-left: 5px;">
            <canvas id="canvas" height="200" width="600"></canvas>
        </div>
    </div>
    <div align="center" class="row" style="min-height: 25px;">
        <span style="color: red; font-weight: bold;">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(DateTime.Now.AddMonths(-2).Month)</span>
        <span style="color: orange; font-weight: bold;">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(DateTime.Now.AddMonths(-1).Month)</span>
        <span style="color: blue; font-weight: bold;">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(DateTime.Now.Month)</span>
    </div>
    <input type="hidden" id="ajaxUrl" value='@Url.Action("GetClassSummaryByClassTypeGraphData")' />

</div>
